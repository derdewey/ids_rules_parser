require 'rubygems'
require 'treetop'
require 'pp'

grammar IDSRules
  rule rules_file
    (complete_sig / comment / empty_line)*
    {
        def process
            elements.collect do |x|
                x.process
            end.select do |x|
                !x.nil?
            end
        end
    }
  end
  rule comment
    "#" comment_text:(![\n] .)* "\n"
    {
        def process
            nil
        end
    }
  end
  rule empty_line
    ((!"\n" [\s])+)? "\n"
    {
        def process
            nil
        end
    }
  end
  rule complete_sig
    app sig
    {
        def process
            app_processed = app.process
            sig_processed = sig.process
            return {:application => app_processed, :signature => sig_processed}
        end
    }
  end
  rule app
    "alert" space proto space src_host:hosts space src_port:ports space direction space dst_host:hosts space dst_port:ports space
    {
        def process
            return {:protocol => proto.text_value,
                    :src_hosts => src_host.text_value,
                    :src_ports => src_port.text_value,
                    :dst_hosts => dst_host.text_value,
                    :dst_ports => dst_port.text_value}
        end
    }
  end
  rule sig
    "(" values:(lone_key / key_value_pair)+ ")"
    {
        def process
            collection = values.elements.collect do |x|
                x.process
            end
            collection
        end
    }
  end
  rule key_value_pair
    #space? key ":" value:(quoted_value/value) ";"
    space? key ":" value:((quoted_value)/(value)) space?
    {
        def process
            return {key.process => value.process}
        end
    }
  end
  rule key
    [\w]+
    {
        def process
            text_value
        end
    }
  end
  rule lone_key
    space? key ";"
    {
        def process
            return {key.text_value => nil}
        end
    }
  end
  rule value
    #(!"\;" .)* ";"
    the_value:((!";" value_char)*) ";"
    {
        def process
            the_value.text_value
        end
    }
  end
  rule quoted_value # for future ref
    # ("\"" (!unescaped_quote .)* "\";")
    "\"" the_value:(!"\";" .)* "\";"
    {
        def process
            the_value.text_value
        end
    }
  end
  rule unescaped_quote
    !(!"[" "\"")
  end
  rule space
    [\s]+
  end
  rule proto
    "tcp" / "udp" / "icmp" / "ip"
  end
  rule hosts
    (!" " .)* / "any"
  end
  rule ports
    (!" " .)* / "any"
  end
  rule direction
    "->" / "<>" / "<-"
  end
rule value_char
    ("\\" .) / .
  end
end
